---
name: Release Flow

on:
  push:
    branches:
      - main

jobs:
  lint:
    uses: ./.github/workflows/job-lint.yml
  test:
    uses: ./.github/workflows/job-test.yml
  release:
    needs:
      - test
      - lint
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
    steps:
      - name: Checkout
        uses: actions/checkout@a5ac7e51b41094c92402da3b24376905380afc29 # v4
        with:
          persist-credentials: false
      - name: Import GPG key
        uses: crazy-max/ghaction-import-gpg@01dd5d3ca463c7f10f7f4f7b4f177225ac661ee4 # v6
        with:
          gpg_private_key: ${{ secrets.ZEBRADIL_BOT_GPG_PRIVATE_KEY }}
          git_user_signingkey: true
          git_commit_gpgsign: true
      - name: Semantic Release
        id: semantic
        uses: cycjimmy/semantic-release-action@v3
        env:
          GITHUB_TOKEN: ${{ secrets.ZEBRADIL_BOT_GITHUB_TOKEN }}
          GIT_AUTHOR_NAME: Zebradli Bot
          GIT_AUTHOR_EMAIL: german.lashevich+github-zebradil-bot@gmail.com
          GIT_COMMITTER_NAME: Zebradli Bot
          GIT_COMMITTER_EMAIL: german.lashevich+github-zebradil-bot@gmail.com
        with:
          extra_plugins: |
            @semantic-release/git
      - name: Install GoReleaser
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: goreleaser/goreleaser-action@5742e2a039330cbb23ebf35f046f814d4c6ff811 # v5
        with:
          install-only: true
      - name: Setup QEMU
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-qemu-action@68827325e0b33c7199eb31dd4e31fbe9023e06e3 # v3
      - name: Setup Docker Buildx
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/setup-buildx-action@d70bba72b1f3fd22344832f00baa16ece964efeb # v3
      - name: Login to GHCR
        if: steps.semantic.outputs.new_release_published == 'true'
        uses: docker/login-action@e92390c5fb421da1463c202d546fed0ec5c39f20 # v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Publish release
        if: steps.semantic.outputs.new_release_published == 'true'
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          AUR_SSH_KEY: ${{ secrets.AUR_SSH_KEY }}
        run: |
          goreleaser release --clean \
            --release-notes <(echo "${{ steps.semantic.outputs.new_release_notes }}")
